@using ExpanseTracker.Data
@using ExpanseTracker.Data.Models
@using ExpanseTracker.Services;
@inject ExpenseService EService;
@inject CategoryService CService;

<table>
    <tr>
        <td>Title</td>
        <td><input type="text" placeholder="@NExp.Title" @bind="NExp.Title"></td>
    </tr>
    <tr>
        <td>Date</td>
        <td><input type="date" placeholder="@NExp.Date" @bind="NExp.Date"></td>
    </tr>
    <tr>
        <td>Amount</td>
        <td><input type="number" placeholder="@NExp.Amount" @bind="NExp.Amount"></td>
    </tr>
    <tr>
        <td>Planned</td>
        <td><input type="checkbox" placeholder="@NExp.Planned" @bind="NExp.Planned"></td>
    </tr>
    <tr>
        <td align="justify">Category</td>
        <td>
            <InputSelect id="Categpry" @bind-Value="@NExp.CategoryId">
                @foreach(var cat in Cats)
                {
                    <option value="@cat.Id">@cat.Name</option>
                }
            </InputSelect>
            <!--
            <table>
                @foreach (var cat in Cats)
                {
                    <tr><td><input type="radio" name="1" checked="(@cat.Id==@NExp.CategoryId)" @onchange="() => setCat(cat.Id)">@cat.Name</td></tr>
                }
            </table>
            -->
        </td>
    </tr>
</table>
<h1>@NExp</h1>
<h1>@Exp</h1>
<button @onclick="addupdate">Save</button>

@code {
    [Parameter]
    public Expense? Exp{ get; set; }
    public List<Category> Cats = new List<Category>();
    public List<Expense> Exps = new List<Expense>();
    public Expense NExp = new();
    public int New_id = 1;

    public void setCat(int id)
    {
        NExp.CategoryId = id;
    }
    private int get_new_id()
    {
        return New_id++;
    }
    public void addupdate()
    {
        if (!string.IsNullOrWhiteSpace(NExp.Title))
        {
            if (Exp.isEmpty()) //add
            {
                Console.WriteLine("Running Add...");
                Expense e = new Expense(get_new_id(), NExp.Title, DateTime.Parse(NExp.Date.ToString()), NExp.Amount, NExp.Planned);
                e.assignContetCategory(CService._context, NExp.CategoryId);
                EService.addExpense(e);
            }
            else //update
            {
                Console.WriteLine("Running Update...");
                Expense e = new Expense(NExp.Id, NExp.Title, DateTime.Parse(NExp.Date.ToString()), NExp.Amount, NExp.Planned);
                e.assignContetCategory(CService._context, NExp.CategoryId);
                EService.updateExpense(e);
            }
        }
    }
    private void loadDefault()
    {
        Cats = CService.getCategories();
        Exps = EService.getExpenses();
        var query = EService._context.Expenses.Max(c => c.Id);
        New_id = query + 1;
    }
    protected override async Task OnInitializedAsync() //process to run when page is loaded
    {
        NExp = Exp;
        NExp.Date = DateTime.UtcNow;
        loadDefault();
    }
}
