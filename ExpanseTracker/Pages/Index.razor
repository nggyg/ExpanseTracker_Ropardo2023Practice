@page "/"
@using ExpanseTracker.Data
@using ExpanseTracker.Data.Models
@using ExpanseTracker.Services;
@inject CategoryService CService;
@inject ExpenseService EService;
@inject IncomeService IService
@inject NavigationManager NavMag;

<PageTitle>Index</PageTitle>

<h1>Expense Tracker</h1>
<h5>
    Your total Income: @Incs.Sum(a=>a.Amount)
    over @getIncomeTimeFrameString()</h5>

<h5>
    Your total Expenses: @Exps.Sum(a=>a.Amount)
    over @getExpenseTimeFrameString()</h5>
<h5>Your Income this month: @Incs.Where(a => a.Date.Month == DateTime.Now.Month && a.Date.Year == DateTime.Now.Year).Sum(a=>a.Amount)</h5>
<h5>Your Expense this month: @Exps.Where(a => a.Date.Month == DateTime.Now.Month && a.Date.Year == DateTime.Now.Year).Sum(a=>a.Amount)</h5>
@if (@Balance > 0)
{
    <h3 style="color:green;">@Balance</h3>
}
else
{
    <h3 style="color:red;">@Balance</h3>
}

<h5>Planned Expenses: @Exps.Where(a=>a.Planned).Sum(a=>a.Amount)</h5>
<h5>Unplanned Expenses:  @Exps.Where(a=>!a.Planned).Sum(a=>a.Amount)</h5>

<h5>Most Expensive Expense Category: @CatExps.Find(c=>c.Item2==@CatExps.Max(c=>c.Item2)).Item1.Name</h5>
<!--
<table>
@foreach(var item in @CatExps)
{
    <tr>
        <td>@item.Item1.Id</td>
        <td>@item.Item1.Name</td>
        <td>@item.Item2</td>
    </tr>
}
</table>
-->
@code{
    public List<Expense> Exps=new();
    public List<Income> Incs=new();
    public List<Category> Cats=new();
    public List<(Category, double)> CatExps = new();
    public double Balance;

    private void loadDefault()
    {
        Exps = EService.getExpenses();
        Incs = IService.getIncomes();
        Cats = CService.getCategories();
        Balance = getSumIncomes() - getSumExpenses();
    }
    public double getSumIncomes()
    {
        return Incs.ToArray().Select((a) => new { nr = a.Amount }).Aggregate(0.0, (a, b) => false ? a : a + b.nr);
    }
    public double getSumExpenses()
    {
        return Exps.ToArray().Select((a) => new { nr = a.Amount }).Aggregate(0.0, (a, b) => false ? a : a + b.nr);
    }
    public string getIncomeTimeFrameString()
    {
        string tf = "";
        tf += Incs.ToArray().Select((a) => new { date = a.Date }).Aggregate(DateTime.Now, (a, b) => a < b.date ? a : b.date).ToString("dd-MM-yyyy");
        tf += " - ";
        tf += Incs.ToArray().Select((a) => new { date = a.Date }).Aggregate(DateTime.Now, (a, b) => a > b.date ? a : b.date).ToString("dd-MM-yyyy");
        return tf;
    }
    public string getExpenseTimeFrameString()
    {
        string tf = "";
        tf += Exps.ToArray().Select((a) => new { date = a.Date }).Aggregate(DateTime.Now, (a, b) => a < b.date ? a : b.date).ToString("dd-MM-yyyy");
        tf += " - ";
        tf += Exps.ToArray().Select((a) => new { date = a.Date }).Aggregate(DateTime.Now, (a, b) => a > b.date ? a : b.date).ToString("dd-MM-yyyy");
        return tf;
    }
    public double getSumIncomesCurrentMonth()
    {
        return Incs.ToArray().Where(a => a.Date.Month == DateTime.Now.Month && a.Date.Year == DateTime.Now.Year).Select((a) => new { nr = a.Amount }).Aggregate(0.0, (a, b) => false ? a : a + b.nr);
    }
    public double getSumExpensesCurrentMonth()
    {
        return Exps.ToArray().Where(a => a.Date.Month == DateTime.Now.Month && a.Date.Year == DateTime.Now.Year).Select((a) => new { nr = a.Amount }).Aggregate(0.0, (a, b) => false ? a : a + b.nr);
    }
    protected override void OnInitialized()
    {
        loadDefault();
        double sum;
        bool found;
        foreach(var cat in Cats)
        {
            sum = 0;
            foreach(var exp in Exps)
            {
                if (exp.CategoryId == cat.Id)
                {
                    sum += exp.Amount;

                }
            }
            if (sum > 0)
                CatExps.Add(new(cat, sum));
        }
    }
}


