@page "/categories"
@using ExpanseTracker.Data
@using ExpanseTracker.Data.Models
@using ExpanseTracker.Services
@inject CategoryService CategoryService;

<h3>Categories</h3>

<table><!--table instead of list for organized layout-->
    @foreach(var cat in Cats)
    {
        <tr>
            <td>@cat.Id @cat.Name</td>
            <td><button @onclick="()=>remove_cat(cat)">delete</button></td> <!--lambda fro function with parameter-->
        </tr>
    }
</table>
<h3>&nbsp;</h3><!--empty space that's not ignored-->

<input placeholder="New Category" @bind="New_cat" />
<button @onclick="add_cat">Add Category</button>

@code {
    private List<Category> Cats = new List<Category>();
    private int New_id = 1;
    public string? New_cat;
    /*  can't call functionf from outside function definition in @code
    Cats.Add(new (get_new_id(), "Food"));
    Cats.Add(new (get_new_id(), "House"));
    Cats.Add(new (get_new_id(), "Entertainment"));
    */
    public void loadDefault()
    {
        Cats.Add(new(get_new_id(), "Food"));
        Cats.Add(new(get_new_id(), "House"));
        Cats.Add(new(get_new_id(), "Entertainment"));
    }

    private int get_new_id()
    {
        return New_id++;
    }
    public void add_cat()
    {
        if (!string.IsNullOrWhiteSpace(New_cat))
        {
            Category New_Cat = new(get_new_id(), New_cat);
            Cats.Add(New_Cat);
            CategoryService.addCategory(New_Cat);
            New_cat = string.Empty;
        }

    }
    public void remove_cat(Category todo)
    {
        Cats.Remove(todo);
        CategoryService.removeCategory(todo);
    }

    private void loadDefault2()
    {
        Cats = CategoryService.getCategories();
        var query = CategoryService._context.Categories.Max(c => c.Id);
        Console.WriteLine(query);
        New_id = query+1;
        //New_id=
    }

    protected override async Task OnInitializedAsync() //process to run when page is loaded
    {
        //loadDefault();
        loadDefault2();
    }
}
