@page "/categories"
@using ExpanseTracker.Data
@using ExpanseTracker.Data.Models
@using ExpanseTracker.Services;
@inject CategoryService CServise;
@inject ExpenseService EService;
@inject NavigationManager NavMag;

<h3>Categories</h3>

<table><!--table instead of list for organized layout-->
    <thead>
        <td>Id</td>
        <td>Name</td>
        <td>Avarage Spending</td>
    </thead>
    @foreach(var cat in Cats)
    {
        <tr>
            <td>@cat.Id </td>
            <td>@cat.Name</td>
            <td>@getAvgSpending(cat.Id)</td>
            <td><button @onclick="()=>remove_cat(cat)">delete</button></td> <!--lambda for function with parameter-->
            <td><button @onclick="()=>goToExpenses(cat.Id)">View Expenses</button></td>
        </tr>
    }
</table>
<h3>&nbsp;</h3><!--empty space that's not ignored-->

<input placeholder="New Category" @bind="New_cat" />
<button @onclick="add_cat">Add Category</button>

@code {
    private List<Category> Cats = new List<Category>();
    public List<Expense> Exps = new();
    private int New_id = 1;
    public string? New_cat;
    /*  can't call functionf from outside function definition in @code
    Cats.Add(new (get_new_id(), "Food"));
    Cats.Add(new (get_new_id(), "House"));
    Cats.Add(new (get_new_id(), "Entertainment"));
    */
    public void loadDefault()
    {
        Cats.Add(new(get_new_id(), "Food"));
        Cats.Add(new(get_new_id(), "House"));
        Cats.Add(new(get_new_id(), "Entertainment"));
    }
    private int get_new_id()
    {
        return New_id++;
    }
    public double getAvgSpending(int id)
    {
        double avg = 0;
        double ct = 0;
        foreach(var exp in Exps)
        {
            if (exp.CategoryId == id)
            {
                avg += exp.Amount;
                ct++;
            }
        }
        if (ct > 0)
            return avg / ct;
        return 0;
    }
    public void goToExpenses(int id)
    {
        NavMag.NavigateTo("/expensecategory/" + id);
    }
    public void add_cat()
    {
        if (!string.IsNullOrWhiteSpace(New_cat))
        {
            Category New_Cat = new(get_new_id(), New_cat);
            Cats.Add(New_Cat);
            CServise.addCategory(New_Cat);
            New_cat = string.Empty;
        }

    }
    public void remove_cat(Category todo)
    {
        Cats.Remove(todo);
        CServise.removeCategory(todo);
    }

    private void loadDefault2()
    {
        Exps = EService.getExpenses();
        Cats = CServise.getCategories();
        var query = CServise._context.Categories.Max(c => c.Id);
        New_id = query+1;
        //New_id=
    }

    protected override void OnInitialized()
    {
        loadDefault2();
    }
}
